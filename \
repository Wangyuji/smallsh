/**************************************************************************************
 * Author: Matthew Solbrack
 * Date: 7/30/2019
 * Program: smallsh (Program 3 - CS 344)
 * Description: This is my own shell in C, similar to bash. The shell will run command
 * line instructions and return the results similar to other shells. The shell has 
 * 3 built in commands: exit, cd, and status. It will also support comments. 
 * ***********************************************************************************/
#include <stdio.h> //print and scanf libraries
#include <string.h> //string usage
#include <stdlib.h>
#include <signal.h> //sigaction and struct
#include <unistd.h> // for exec()
#include <sys/types.h>

#define MAX 2048





int main()
{

	struct sigaction ignore_action = {0};
	ignore_action.sa_handler = SIG_IGN;

	sigaction(SIGINT, &ignore_action, NULL);

	pid_t spawnpid = -5;

 	char 	str[MAX], //Capture the string entered by the user
		str_array[512][100], //break string into words
		redirection_array[512][100];

	int 	word_count, character_count, loop, redirection; //keeps track of words 
	


	while(1)
	{
		// Making it look like a terminal; ":" is used as a prompt for each command line
		fflush(stdin);	//flush the output buffer 
		printf(": ");
		fgets(str, MAX, stdin);
		str[strlen(str)-1] = '\0'; //remove the newline from the string
		
		word_count = 0;
		character_count=0;
		for (loop = 0; loop <= (strlen(str)); loop++)
		{
			if(str[loop] == ' ' || str[loop] == '\0')
			{
				str_array[word_count][character_count] = '\0';
				character_count = 0;
				word_count++;
			}
			else
			{
				str_array[word_count][character_count] = str[loop];
				character_count++;
			}
	
		}

		memset(str, '\0', sizeof(str));

		strcat(str, str_array[0]);
		for (redirection = 0; redirection < word_count; redirection++)
		{
			if(strcmp(str_array[loop], "<") == 0 || strcmp(str_array[loop], ">") == 0)
				break;
			else
			{
				strcat(str, ", ");
				strcat(str, str_array[redirection]);
			}
		}		
		
		printf("%s\n", str);	
		

		printf("%d\n", loop);

		//If the " &" variable is at the end 		
		if (strcmp("&", str_array[word_count - 1]) == 0)
			printf("The & was recognized");
		// exit when the user enters "exit $"
		if(strcmp(str_array[0], "exit") == 0) { exit(0); }
		else if(str[0] == '#') { break; }
/*	 
		else 
			spawnpid = fork();

			if (spawnpid == -1)
			{
				perror("Error with command\n");
				exit(1);
			}
			else if (spawnpid == 0)
			{
//				if (strstr(
				
				



			}
								
*/


	}

	return 0;
}
